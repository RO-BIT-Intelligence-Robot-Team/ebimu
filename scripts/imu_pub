#!/usr/bin/env python3
import math
import serial
import rospy
import tf
import re
from sensor_msgs.msg import Imu

def talker():
    rospy.init_node('imu_publisher')
    rospy.loginfo("Starting imu sensor setup...")

    # 파라미터 가져오기
    imu_port = rospy.get_param('~port', '/dev/IMU')
    baud = rospy.get_param('~baud', 115200)
    ser = serial.Serial(imu_port, baud)

    imu_data = Imu()

    ser.write(str.encode('<sof2>'))
    rospy.loginfo("imu setup: quaternion ON")
    ser.readline()

    ser.write(str.encode('<sog1>'))
    rospy.loginfo("imu setup: angular velocity(gyro) ON")
    ser.readline()

    ser.write(str.encode('<soa1>'))
    rospy.loginfo("imu setup: linear velocity with gravity ON")
    ser.readline()

    ser.write(str.encode('<sem1>'))
    rospy.loginfo("imu setup: magnetometer ON")
    ser.readline()

    ser.write(str.encode('<sot0>'))
    rospy.loginfo("imu setup: temperature OFF")
    ser.readline()

    ser.write(str.encode('<sod0>'))
    rospy.loginfo("imu setup: distance OFF")
    ser.readline()

    ser.write(str.encode('<sor10>'))  # 100ms = 10hz로 출력 속도 설정
    rospy.loginfo("imu setup: 100hz output rate")
    ser.readline()

    imu_pub = rospy.Publisher("imu", Imu, queue_size=5)
    base_link_2_base_footprint_tf = tf.TransformBroadcaster()
    rate = rospy.Rate(100)  # 100hz

    prev_str = ser.readline().decode('utf-8')  # 초기 prev_str 설정

    rospy.loginfo("start ebimu node")
    while not rospy.is_shutdown():
        ser.reset_input_buffer()

        str_temp = ser.readline().decode('utf-8')  # 바이트를 문자열로 디코딩
        comma_cnt = len([m.start() for m in re.finditer(',', str_temp)])
        if comma_cnt != 9:
            str_list = prev_str
            rospy.logwarn("invalid message from imu. ignore data for once")
        else:
            str_list = str_temp
            prev_str = str_temp

        if not isinstance(str_list, str):
            continue

        str_list = str_list.split(',')
        str_list[0] = str_list[0].split('*')[1]

        imu_data.header.stamp = rospy.Time.now()
        imu_data.header.frame_id = "imu_link"
        # 주의: EBIMU는 quaternion 벡터를 [z, y, x, w] 순서로 반환
        imu_data.orientation.z = float(str_list[0])
        imu_data.orientation.y = float(str_list[1])
        imu_data.orientation.x = float(str_list[2])
        imu_data.orientation.w = float(str_list[3])
        imu_data.orientation_covariance = [0.0007, 0, 0, 0, 0.0007, 0, 0, 0, 0.0007]
        imu_data.linear_acceleration.x = -float(str_list[7]) * 9.81
        imu_data.linear_acceleration.y = -float(str_list[8]) * 9.81
        imu_data.linear_acceleration.z = -float(str_list[9]) * 9.81
        imu_data.linear_acceleration_covariance = [0.005, 0, 0, 0, 0.005, 0, 0, 0, 0.005]
        imu_data.angular_velocity.x = math.radians(float(str_list[4]))
        imu_data.angular_velocity.y = math.radians(float(str_list[5]))
        imu_data.angular_velocity.z = math.radians(float(str_list[6]))
        imu_data.angular_velocity_covariance = [0.001, 0, 0, 0, 0.001, 0, 0, 0, 0.001]
        imu_pub.publish(imu_data)

        odom_quat = (float(str_list[2]), float(str_list[1]), float(str_list[0]), float(str_list[3]))
        euler = tf.transformations.euler_from_quaternion(odom_quat)

        prev_str = str_list
        rate.sleep()

if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass
